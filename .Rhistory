aes(x=sd, y=val.dif)) +
mapply(function(xx,yy,name){
annotation_custom(im.grobs[[name]],
xmin=xx-im.s,
ymin=yy-im.s,
xmax=xx+im.s,
ymax=yy+im.s)},
objects.val$sd, objects.val$val.dif, objects.val$Item.Name) +
geom_smooth(method="lm",color="brown1")+
xlab(bquote('SD'*~log[10]*' price'))+
ylab('Positive-Negative ad difference')+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'))
# Chunk 1
source('utilities.R')
library(jpeg)
# Chunk 2
header = c('Subject', 'Block', 'Trial', 'Item.num', 'Item.Name', 'Item.File', 'Modifier.num', 'Modifier.Name', 'Modifier.Direction', 'True.Value', 'Estimate', 'BetValue', 'RangeValue', 'MinValue', 'MaxValue', 'Score', 'RT', 'Timestamp')
files = list.files(path = 'data/value1/')
est.dat = data.frame()
for(f in files){
dat = read.csv(sprintf('data/value1/%s', f), header=FALSE)
est.dat = rbind(est.dat, cbind(strsplit(f, '_')[[1]][1], dat))
}
names(est.dat) <- header
temp = ddply(est.dat, .(Item.Name, Subject),
summarise,
Subject.Mean=mean(log10(Estimate), na.rm=T),
Subject.sd=sd(log10(Estimate), na.rm=T),
Subject.range=mean(RangeValue, na.rm=T))
objects = ddply(temp, .(Item.Name), summarise,
Across.S.mean=mean(Subject.Mean, na.rm=T),
n.S = sum(!is.na(Subject.Mean)),
Across.S.sd=sd(Subject.Mean, na.rm=T),
Within.S.sd=mean(Subject.sd,na.rm=T),
Within.S.range=mean(Subject.range))
trueProps = ddply(est.dat,~Item.Name,summarise,mean=mean(log10(True.Value)),sd=sd(log10(True.Value)))
objects = cbind(objects, trueProps[,2:3])
# Chunk 3
# read in image files.
im.grobs = list()
for(i in 1:nrow(objects)){
imname= as.character(objects$Item.Name[i])
t = gsub("[[:space:]]", ".", imname)
t = gsub("'", "", t)
imfile = paste0('imgs/', tolower(t), '.jpeg')
im.grobs[[imname]] = rasterGrob(readJPEG(imfile), interpolate=TRUE)
}
# Chunk 4
im.s = 0.05
ggplot(objects, aes(x=mean, y=Across.S.mean)) +
mapply(function(xx,yy,name){
annotation_custom(im.grobs[[name]],
xmin=xx-im.s,
ymin=yy-im.s,
xmax=xx+im.s,
ymax=yy+im.s)},
objects$mean, objects$Across.S.mean, objects$Item.Name) +
geom_abline(color="gray",color='brown1')+
xlab(bquote('Mean'*~log[10]*' price'))+
ylab(bquote('Mean'*~log[10]*' reported price'))+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'))
# Chunk 5
im.s = 0.015
ggplot(objects,
aes(x=sd, y=Across.S.sd)) +
mapply(function(xx,yy,name){
annotation_custom(im.grobs[[name]],
xmin=xx-im.s,
ymin=yy-im.s,
xmax=xx+im.s,
ymax=yy+im.s)},
objects$sd, objects$Across.S.sd, objects$Item.Name) +
geom_abline(color='gray')+
geom_smooth(method="lm",color='brown1')+
coord_cartesian(ylim=c(0.065, 0.84), xlim=c(0.065, 0.84))+
xlab(bquote('SD'*~log[10]*' price'))+
ylab(expression(atop(paste("Across participant SD"),''*~log[10]*' reported price')))+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'))
# Chunk 6
ggplot(objects,
aes(x=sd, y=Within.S.range)) +
mapply(function(xx,yy,name){
annotation_custom(im.grobs[[name]],
xmin=xx-im.s,
ymin=yy-im.s,
xmax=xx+im.s,
ymax=yy+im.s)},
objects$sd, objects$Within.S.range, objects$Item.Name) +
geom_abline(color='gray')+
geom_smooth(method="lm",color="brown1")+
coord_cartesian(ylim=c(0.065, 0.84), xlim=c(0.065, 0.84))+
xlab(bquote('SD'*~log[10]*' price'))+
ylab(expression(atop(paste("Within participant range"),''*~log[10]*' reported price')))+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'))
# Chunk 7
ggplot(objects,
aes(x=sd, y=Within.S.sd)) +
mapply(function(xx,yy,name){
annotation_custom(im.grobs[[name]],
xmin=xx-im.s,
ymin=yy-im.s,
xmax=xx+im.s,
ymax=yy+im.s)},
objects$sd, objects$Within.S.sd, objects$Item.Name) +
geom_abline(color='gray')+
geom_smooth(method="lm",color='brown1')+
coord_cartesian(ylim=c(0.065, 0.84), xlim=c(0.065, 0.84))+
xlab(bquote('SD'*~log[10]*' price'))+
ylab(expression(atop(paste("Within participant SD"),''*~log[10]*' reported price')))+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'))
# Chunk 8
files = list.files(path = 'data/valuead/')
header = c('Subject', 'Block', 'Trial', 'Item.num', 'Item.Name', 'Item.File', 'Modifier.num', 'Modifier.Name', 'Modifier.Direction', 'True.Value', 'Estimate', 'BetValue', 'RangeValue', 'MinValue', 'MaxValue', 'Score', 'RT', 'Timestamp')
full.dat = data.frame()
for(f in files){
dat = read.csv(sprintf('data/valuead/%s', f), header=FALSE)
full.dat = rbind(full.dat, cbind(strsplit(f, '_')[[1]][1], dat))
}
names(full.dat) <- header
for(subject in levels(full.dat$Subject)){
use = full.dat$Subject == subject
q = subset(full.dat, use)
full.dat$Range.Norm[use] = (q$RangeValue-mean(q$RangeValue))/max(0.01, sd(q$RangeValue))
}
# For each item, rank its price estimate
for(item in levels(full.dat$Item.Name)){
use = full.dat$Item.Name == item
q = subset(full.dat, use)
full.dat$Est.Item.Rank[use] = (rank(q$Estimate)-1)/(nrow(q)-1)
full.dat$L10.Relative.Est[use] = log10(q$Estimate) - mean(log10(q$Estimate))
full.dat$L10.Z.Est[use] = (log10(q$Estimate) - mean(log10(q$Estimate)))/sd(log10(q$Estimate))
}
# And then average over labels to see which labels resulted in higher ranks
modifiers = ddply(full.dat, .(Modifier.Name),summarise,
Rank.mean=mean(Est.Item.Rank), Rank.sd=sd(Est.Item.Rank),
Rel.mean=mean(L10.Relative.Est), Rel.sd=sd(L10.Relative.Est),
Abs.mean=mean(log10(Estimate)), Abs.sd=sd(log10(Estimate)),
Z.mean=mean(L10.Z.Est), Z.sd=sd(L10.Z.Est),
Rank.median = median(Est.Item.Rank), Rank.q25=quantile(Est.Item.Rank, 0.25), Rank.q75=quantile(Est.Item.Rank, 0.75))
# do something to sort these by effectiveness
full.dat$Modifier.Name = factor(full.dat$Modifier.Name, levels(modifiers$Modifier.Name)[order(modifiers$Rank.mean)])
trueProps2 = ddply(full.dat, ~Item.Name,summarise,
mean=mean(log10(True.Value)),
sd=sd(log10(True.Value)))
m = trueProps2$mean
names(m) = trueProps2$Item.Name
s = trueProps$sd
names(s) = trueProps2$Item.Name
full.dat$True.L10.Mean = m[full.dat$Item.Name]
full.dat$True.L10.SD = s[full.dat$Item.Name]
full.dat$L10.Estimate = log10(full.dat$Estimate)
# Chunk 9
# Sort modifier levels by effectiveness
full.dat$Modifier.Name = factor(full.dat$Modifier.Name, levels(modifiers$Modifier.Name)[order(modifiers$Rank.mean)])
mod.val=ddply(full.dat,c('Modifier.Name'),summarize,valence=mean(Modifier.Direction))
mod.val$Factor.valence=factor(mod.val$valence)
modifiers$Modifier.Name = factor(modifiers$Modifier.Name, levels(modifiers$Modifier.Name)[order(modifiers$Rank.mean)])
full.dat$Factor.Modifier.Direction=factor(full.dat$Modifier.Direction)
modifiers=merge(modifiers,mod.val)
boxfun= function(x){
m = mean(x)
s.d = sd(x)
s.e = sd(x)/sqrt(length(x))
qs = quantile(x, c(0.1, 0.25, 0.5, 0.75, 0.9))
vals = c('ymin'=unname(qs['25%']),
'lower'=m-s.e,
'middle'=m,
'upper'=m+s.e,
'ymax'=unname(qs['75%']))
return(vals)
}
ggplot(full.dat, aes(x=Modifier.Name, y=Est.Item.Rank))+
geom_violin(fill="gray", color="gray")+
stat_summary(fun.data = boxfun, geom="boxplot", color="black", size=0.75, fill="indianred1")+
xlab('') +
ylab('Within-product price percentile') +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'),
axis.text.x = element_text(angle=90,hjust=1))
# Chunk 10
item.mod = lmer(data=full.dat, L10.Estimate~1+True.L10.Mean+(1|Subject)+(1|Item.Name)+(1|Modifier.Name)+(1|Modifier.Name:Item.Name))
item.mod.rf=ranef(item.mod)$'Modifier.Name:Item.Name'
modifiers.rf=(mapply(function(xx){ strsplit(xx,':')[[1]][1]},row.names(item.mod.rf)))
objects.rf=(mapply(function(xx){ strsplit(xx,':')[[1]][2]},row.names(item.mod.rf)))
objmod.rf.df=data.frame('object'=objects.rf,'modifiers'=modifiers.rf,'rf'=item.mod.rf)
objmod.rf.df2=merge(objmod.rf.df,modifiers,by.x='modifiers',by.y='Modifier.Name')
for(i in seq(13,4)){
objmod.rf.df2[,i]=NULL;
}
difference.cheap=function(x){
return(abs(x[1]-x[2]))
}
# For each object, group the positive and negative valence ads
obj.val.shift=ddply(objmod.rf.df2,c('object','Factor.valence'),summarize,mean.shift=mean(X.Intercept.))
# # Find the difference between the positive and negative valence ads for each object
obj.val.dif=ddply(obj.val.shift,c('object'),summarize,val.dif=difference.cheap(mean.shift))
# Figure out whether that difference is correlated with price dispersion
obj.val.dif.disp=merge(objects[,c('Item.Name','sd')],obj.val.dif,by.y='object',by.x='Item.Name')
objects.val=objects
objects.val$val.dif=0
for(i in seq(1,nrow(obj.val.dif.disp))){
curr.obj=obj.val.dif.disp[i,]$Item.Name
curr.val=obj.val.dif.disp[i,]$val.dif
objects.val$val.dif[objects$Item.Name==curr.obj]=curr.val
}
im.s=.02
ggplot(objects.val,
aes(x=sd, y=val.dif)) +
mapply(function(xx,yy,name){
annotation_custom(im.grobs[[name]],
xmin=xx-im.s,
ymin=yy-im.s,
xmax=xx+im.s,
ymax=yy+im.s)},
objects.val$sd, objects.val$val.dif, objects.val$Item.Name) +
geom_smooth(method="lm",color="brown1")+
xlab(bquote('SD'*~log[10]*' price'))+
ylab('Positive-Negative ad difference')+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'))
# Chunk 11
subj.means=ranef(item.mod)$Subject[[1]]
subj.means.df=data.frame(subj.means)
ggplot(subj.means.df,aes(subj.means))+
geom_histogram(bins=15)+
xlab('Participant coefficients')+
ylab('Frequency')+
theme_bw()
setwd("~/Documents/github_public/price_is_right")
# Chunk 1
source('utilities.R')
library(jpeg)
# Chunk 2
header = c('Subject', 'Block', 'Trial', 'Item.num', 'Item.Name', 'Item.File', 'Modifier.num', 'Modifier.Name', 'Modifier.Direction', 'True.Value', 'Estimate', 'BetValue', 'RangeValue', 'MinValue', 'MaxValue', 'Score', 'RT', 'Timestamp')
files = list.files(path = 'data/value1/')
est.dat = data.frame()
for(f in files){
dat = read.csv(sprintf('data/value1/%s', f), header=FALSE)
est.dat = rbind(est.dat, cbind(strsplit(f, '_')[[1]][1], dat))
}
names(est.dat) <- header
temp = ddply(est.dat, .(Item.Name, Subject),
summarise,
Subject.Mean=mean(log10(Estimate), na.rm=T),
Subject.sd=sd(log10(Estimate), na.rm=T),
Subject.range=mean(RangeValue, na.rm=T))
objects = ddply(temp, .(Item.Name), summarise,
Across.S.mean=mean(Subject.Mean, na.rm=T),
n.S = sum(!is.na(Subject.Mean)),
Across.S.sd=sd(Subject.Mean, na.rm=T),
Within.S.sd=mean(Subject.sd,na.rm=T),
Within.S.range=mean(Subject.range))
trueProps = ddply(est.dat,~Item.Name,summarise,mean=mean(log10(True.Value)),sd=sd(log10(True.Value)))
objects = cbind(objects, trueProps[,2:3])
# Chunk 3
# read in image files.
im.grobs = list()
for(i in 1:nrow(objects)){
imname= as.character(objects$Item.Name[i])
t = gsub("[[:space:]]", ".", imname)
t = gsub("'", "", t)
imfile = paste0('imgs/', tolower(t), '.jpeg')
im.grobs[[imname]] = rasterGrob(readJPEG(imfile), interpolate=TRUE)
}
# Chunk 4
im.s = 0.05
ggplot(objects, aes(x=mean, y=Across.S.mean)) +
mapply(function(xx,yy,name){
annotation_custom(im.grobs[[name]],
xmin=xx-im.s,
ymin=yy-im.s,
xmax=xx+im.s,
ymax=yy+im.s)},
objects$mean, objects$Across.S.mean, objects$Item.Name) +
geom_abline(color="gray",color='brown1')+
xlab(bquote('Mean'*~log[10]*' price'))+
ylab(bquote('Mean'*~log[10]*' reported price'))+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'))
# Chunk 5
im.s = 0.015
ggplot(objects,
aes(x=sd, y=Across.S.sd)) +
mapply(function(xx,yy,name){
annotation_custom(im.grobs[[name]],
xmin=xx-im.s,
ymin=yy-im.s,
xmax=xx+im.s,
ymax=yy+im.s)},
objects$sd, objects$Across.S.sd, objects$Item.Name) +
geom_abline(color='gray')+
geom_smooth(method="lm",color='brown1')+
coord_cartesian(ylim=c(0.065, 0.84), xlim=c(0.065, 0.84))+
xlab(bquote('SD'*~log[10]*' price'))+
ylab(expression(atop(paste("Across participant SD"),''*~log[10]*' reported price')))+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'))
# Chunk 6
ggplot(objects,
aes(x=sd, y=Within.S.range)) +
mapply(function(xx,yy,name){
annotation_custom(im.grobs[[name]],
xmin=xx-im.s,
ymin=yy-im.s,
xmax=xx+im.s,
ymax=yy+im.s)},
objects$sd, objects$Within.S.range, objects$Item.Name) +
geom_abline(color='gray')+
geom_smooth(method="lm",color="brown1")+
coord_cartesian(ylim=c(0.065, 0.84), xlim=c(0.065, 0.84))+
xlab(bquote('SD'*~log[10]*' price'))+
ylab(expression(atop(paste("Within participant range"),''*~log[10]*' reported price')))+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'))
# Chunk 7
ggplot(objects,
aes(x=sd, y=Within.S.sd)) +
mapply(function(xx,yy,name){
annotation_custom(im.grobs[[name]],
xmin=xx-im.s,
ymin=yy-im.s,
xmax=xx+im.s,
ymax=yy+im.s)},
objects$sd, objects$Within.S.sd, objects$Item.Name) +
geom_abline(color='gray')+
geom_smooth(method="lm",color='brown1')+
coord_cartesian(ylim=c(0.065, 0.84), xlim=c(0.065, 0.84))+
xlab(bquote('SD'*~log[10]*' price'))+
ylab(expression(atop(paste("Within participant SD"),''*~log[10]*' reported price')))+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'))
# Chunk 8
files = list.files(path = 'data/valuead/')
header = c('Subject', 'Block', 'Trial', 'Item.num', 'Item.Name', 'Item.File', 'Modifier.num', 'Modifier.Name', 'Modifier.Direction', 'True.Value', 'Estimate', 'BetValue', 'RangeValue', 'MinValue', 'MaxValue', 'Score', 'RT', 'Timestamp')
full.dat = data.frame()
for(f in files){
dat = read.csv(sprintf('data/valuead/%s', f), header=FALSE)
full.dat = rbind(full.dat, cbind(strsplit(f, '_')[[1]][1], dat))
}
names(full.dat) <- header
for(subject in levels(full.dat$Subject)){
use = full.dat$Subject == subject
q = subset(full.dat, use)
full.dat$Range.Norm[use] = (q$RangeValue-mean(q$RangeValue))/max(0.01, sd(q$RangeValue))
}
# For each item, rank its price estimate
for(item in levels(full.dat$Item.Name)){
use = full.dat$Item.Name == item
q = subset(full.dat, use)
full.dat$Est.Item.Rank[use] = (rank(q$Estimate)-1)/(nrow(q)-1)
full.dat$L10.Relative.Est[use] = log10(q$Estimate) - mean(log10(q$Estimate))
full.dat$L10.Z.Est[use] = (log10(q$Estimate) - mean(log10(q$Estimate)))/sd(log10(q$Estimate))
}
# And then average over labels to see which labels resulted in higher ranks
modifiers = ddply(full.dat, .(Modifier.Name),summarise,
Rank.mean=mean(Est.Item.Rank), Rank.sd=sd(Est.Item.Rank),
Rel.mean=mean(L10.Relative.Est), Rel.sd=sd(L10.Relative.Est),
Abs.mean=mean(log10(Estimate)), Abs.sd=sd(log10(Estimate)),
Z.mean=mean(L10.Z.Est), Z.sd=sd(L10.Z.Est),
Rank.median = median(Est.Item.Rank), Rank.q25=quantile(Est.Item.Rank, 0.25), Rank.q75=quantile(Est.Item.Rank, 0.75))
# do something to sort these by effectiveness
full.dat$Modifier.Name = factor(full.dat$Modifier.Name, levels(modifiers$Modifier.Name)[order(modifiers$Rank.mean)])
trueProps2 = ddply(full.dat, ~Item.Name,summarise,
mean=mean(log10(True.Value)),
sd=sd(log10(True.Value)))
m = trueProps2$mean
names(m) = trueProps2$Item.Name
s = trueProps$sd
names(s) = trueProps2$Item.Name
full.dat$True.L10.Mean = m[full.dat$Item.Name]
full.dat$True.L10.SD = s[full.dat$Item.Name]
full.dat$L10.Estimate = log10(full.dat$Estimate)
# Chunk 9
# Sort modifier levels by effectiveness
full.dat$Modifier.Name = factor(full.dat$Modifier.Name, levels(modifiers$Modifier.Name)[order(modifiers$Rank.mean)])
mod.val=ddply(full.dat,c('Modifier.Name'),summarize,valence=mean(Modifier.Direction))
mod.val$Factor.valence=factor(mod.val$valence)
modifiers$Modifier.Name = factor(modifiers$Modifier.Name, levels(modifiers$Modifier.Name)[order(modifiers$Rank.mean)])
full.dat$Factor.Modifier.Direction=factor(full.dat$Modifier.Direction)
modifiers=merge(modifiers,mod.val)
boxfun= function(x){
m = mean(x)
s.d = sd(x)
s.e = sd(x)/sqrt(length(x))
qs = quantile(x, c(0.1, 0.25, 0.5, 0.75, 0.9))
vals = c('ymin'=unname(qs['25%']),
'lower'=m-s.e,
'middle'=m,
'upper'=m+s.e,
'ymax'=unname(qs['75%']))
return(vals)
}
ggplot(full.dat, aes(x=Modifier.Name, y=Est.Item.Rank))+
geom_violin(fill="gray", color="gray")+
stat_summary(fun.data = boxfun, geom="boxplot", color="black", size=0.75, fill="indianred1")+
xlab('') +
ylab('Within-product price percentile') +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'),
axis.text.x = element_text(angle=90,hjust=1))
# Chunk 10
item.mod = lmer(data=full.dat, L10.Estimate~1+True.L10.Mean+(1|Subject)+(1|Item.Name)+(1|Modifier.Name)+(1|Modifier.Name:Item.Name))
item.mod.rf=ranef(item.mod)$'Modifier.Name:Item.Name'
modifiers.rf=(mapply(function(xx){ strsplit(xx,':')[[1]][1]},row.names(item.mod.rf)))
objects.rf=(mapply(function(xx){ strsplit(xx,':')[[1]][2]},row.names(item.mod.rf)))
objmod.rf.df=data.frame('object'=objects.rf,'modifiers'=modifiers.rf,'rf'=item.mod.rf)
objmod.rf.df2=merge(objmod.rf.df,modifiers,by.x='modifiers',by.y='Modifier.Name')
for(i in seq(13,4)){
objmod.rf.df2[,i]=NULL;
}
difference.cheap=function(x){
return(abs(x[1]-x[2]))
}
# For each object, group the positive and negative valence ads
obj.val.shift=ddply(objmod.rf.df2,c('object','Factor.valence'),summarize,mean.shift=mean(X.Intercept.))
# # Find the difference between the positive and negative valence ads for each object
obj.val.dif=ddply(obj.val.shift,c('object'),summarize,val.dif=difference.cheap(mean.shift))
# Figure out whether that difference is correlated with price dispersion
obj.val.dif.disp=merge(objects[,c('Item.Name','sd')],obj.val.dif,by.y='object',by.x='Item.Name')
objects.val=objects
objects.val$val.dif=0
for(i in seq(1,nrow(obj.val.dif.disp))){
curr.obj=obj.val.dif.disp[i,]$Item.Name
curr.val=obj.val.dif.disp[i,]$val.dif
objects.val$val.dif[objects$Item.Name==curr.obj]=curr.val
}
im.s=.02
ggplot(objects.val,
aes(x=sd, y=val.dif)) +
mapply(function(xx,yy,name){
annotation_custom(im.grobs[[name]],
xmin=xx-im.s,
ymin=yy-im.s,
xmax=xx+im.s,
ymax=yy+im.s)},
objects.val$sd, objects.val$val.dif, objects.val$Item.Name) +
geom_smooth(method="lm",color="brown1")+
xlab(bquote('SD'*~log[10]*' price'))+
ylab('Positive-Negative ad difference')+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size=18, face='bold'),
title = element_text(size=26, face='bold'),
axis.title = element_text(size=22, face='bold'))
# Chunk 11
subj.means=ranef(item.mod)$Subject[[1]]
subj.means.df=data.frame(subj.means)
ggplot(subj.means.df,aes(subj.means))+
geom_histogram(bins=15)+
xlab('Participant coefficients')+
ylab('Frequency')+
theme_bw()
head(objects.val)
ranef(item.mod)$'Modifier.Name:Item.Name'
abs(ranef(item.mod)$'Modifier.Name:Item.Name')
mean(abs(ranef(item.mod)$'Modifier.Name:Item.Name'))
abs(ranef(item.mod)$'Modifier.Name:Item.Name')
abs(ranef(item.mod)$'Modifier.Name:Item.Name')
mean(abs(ranef(item.mod)$'Modifier.Name:Item.Name'))
mean(abs(ranef(item.mod)$'Modifier.Name:Item.Name'),na.rm=true
)
type(abs(ranef(item.mod)$'Modifier.Name:Item.Name'))
is.type(abs(ranef(item.mod)$'Modifier.Name:Item.Name'))
abs(ranef(item.mod)$'Modifier.Name:Item.Name')
abs(ranef(item.mod)$'Modifier.Name:Item.Name')[[1]]
mean(abs(ranef(item.mod)$'Modifier.Name:Item.Name')[[1]])
mean(abs(ranef(item.mod)$'Modifier.Name')[[1]])
ads.magnitude=mean(abs(ranef(item.mod)$'Modifier.Name')[[1]])
ads.disp.magnitude=mean(abs(ranef(item.mod)$'Modifier.Name:Item.Name')[[1]])
ads.disp.magnitude/(ads.magnitude+ads.disp.magnitude)
1-(ads.disp.magnitude/(ads.magnitude+ads.disp.magnitude))
